package com.xiaozi.designpatterntestdemo.principle;

/**
 * @author : Sun
 * @version : 1.0
 * create time : 2019/10/15 12:47
 * desc : 开闭原则(OCP)——面向对象设计原则
 *
 * 1.开闭原则的定义
 * 开闭原则由勃兰特·梅耶（Bertrand Meyer）提出:
 * 软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for
 * modification），这就是开闭原则的经典定义。
 * 软件实体包括以下几个部分：
 * 1).项目中划分出的模块
 * 2).类与接口
 * 3).方法
 * 开闭原则的含义是:当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。
 *
 * 2.开闭原则的作用
 * 开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。
 * 作用如下:
 * 1).对软件测试的影响
 * 软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。
 * 2).可以提高代码的可复用性
 * 粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。
 * 3).可以提高软件的可维护性
 * 遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。
 *
 * 3.开闭原则的实现方法
 * 可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层,
 * 而将相同的可变因素封装在相同的具体实现类中。
 * 因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派
 * 生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。
 *
 * 【例1】Windows 的桌面主题设计。
 * 分析：Windows 的主题是桌面背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的桌面主题，
 * 也可以从网上下载新的主题。这些主题有共同的特点，可以为其定义一个抽象类,而每个具体的主题是其子类。用户窗体
 * 可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的.
 *
 */
public class OpenClosedPrinciple {
}
