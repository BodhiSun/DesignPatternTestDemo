package com.xiaozi.designpatterntestdemo.pattern;

/**
 * @author : Sun
 * @version : 1.0
 * create time : 2019/10/17 14:57
 * desc :代理模式-结构型模式
 *
 * 背景：
 * 在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是
 * 代理对象。例如，购买火车票可以去火车票代售点买。在软件设计中，也有很多使用代理模式的例子，例如，因为安
 * 全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。
 *
 * 代理模式的定义与特点
 * 代理模式的定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能
 * 直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。
 * 代理模式的主要优点有：
 * 1.代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；
 * 2.代理对象可以扩展目标对象的功能；
 * 3.代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；
 * 其主要缺点是：
 * 1.在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；
 * 2.增加了系统的复杂度；
 *
 * 代理模式的结构与实现
 * 代理模式的结构比较简单，主要是通过定义一个继承抽象主题的代理来包含真实主题，从而实现对真实主题的访问。
 * 代理模式的主要角色如下：
 * 1.抽象主题类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。
 * 2.真实主题类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。
 * 3.代理类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。
 *
 * 代理模式的应用场景
 * 1.远程代理，这种方式通常是为了隐藏目标对象存在于不同地址空间的事实，方便客户端访问。例如，用户申请某些
 * 网盘空间时，会在用户的文件系统中建立一个虚拟的硬盘，用户访问虚拟硬盘时实际访问的是网盘空间。
 * 2.虚拟代理，这种方式通常用于要创建的目标对象开销很大时。例如，因某种计算比较复杂而短时间无法完成，这时
 * 可以先用小比例的虚拟代理替换真实的对象，消除用户对服务器慢的感觉。
 * 3.安全代理，这种方式通常用于控制不同种类客户对真实对象的访问权限。
 * 4.智能指引，主要用于调用目标对象时，代理附加一些额外的处理功能。例如，增加计算真实对象的引用次数的功能，
 * 这样当该对象没有被引用时，就可以自动释放它。
 * 5.延迟加载，指为了提高系统的性能，延迟对目标的加载。例如，Hibernate中就存在属性的延迟加载和关联表的延时加载。
 *
 * 代理模式的应用实例
 * 【例1】某公司是某家特产公司的代理公司，用代理模式实现。
 * 分析：特产公司是真实主题，提供了显示特产的 display() 方法，而代理公司通过调用特产公司的 display()方法
 * 显示代理产品，当然它可以增加一些额外的处理，如包裝或加价等。客户可通过代理公司间接访问特产公司的产品。
 *
 * 代理模式的扩展
 * 代理模式中代理类包含了对真实主题的引用，这种方式存在两个缺点：
 * 1.真实主题与代理主题一一对应，增加真实主题也要增加代理。
 * 2.设计代理以前真实主题必须事先存在，不太灵活。采用动态代理模式可以解决以上问题。
 *
 */
public class ProxyPattern {

    public static void testProxyPattern(){
        ProxyCompany proxyCompany = new ProxyCompany();
        proxyCompany.display();
    }


    //抽象主题：特产
    interface Specialty{
        void display();
    }

    //真实主题：某特产公司
    static class SpecialtyCompany implements Specialty{

        @Override
        public void display() {
            System.out.println("特产公司展示特产...");
        }
    }

    //代理：某代理公司
    static class ProxyCompany implements Specialty{
        private SpecialtyCompany realSubject=new SpecialtyCompany();

        @Override
        public void display() {
            preRequest();
            realSubject.display();
            postRequest();
        }

        public void preRequest()
        {
            System.out.println("代理公司代理特产公司的特产开始。");
        }

        public void postRequest()
        {
            System.out.println("代理公司代理特产公司的特产结束。");
        }
    }



}
